!function(){"use strict";class e{constructor(e){let{popUpSelector:t}=e;this._popElement=document.querySelector(t),this._closeButton=this._popElement.querySelector(".modal__close")}open(){this._popElement.classList.add("modal_opened"),this._popElement.addEventListener("keydown",this._handleEscClose),this._popElement.addEventListener("click",this._closeWithClick)}close(){this._popElement.classList.remove("modal_opened"),document.addEventListener("click",this._closeWithClick),document.addEventListener("keydown",this._handleEscClose),console.log("close")}_handleEscClose=e=>{"Escape"===e.key&&this.close()};_closeWithClick=e=>{(e.target.classList.contains("modal__close")||e.target.classList.contains("modal"))&&this.close()};setEventListeners(){this._closeButton.addEventListener("click",(()=>{this.close()}))}}class t extends e{constructor(e){let{popUpSelector:t,handleFormSubmit:s,loadingButtonText:o}=e;super({popUpSelector:t}),this._loadingButtonText=o,this._popForm=this._popElement.querySelector(".modal__form"),this._handleFormSubmit=s,this._submitButton=this._popForm.querySelector(".modal__button"),this._buttonText=this._submitButton.textContent,this._inputEls=Array.from(this._popForm.querySelectorAll(".modal__input"))}_getInputValues(){const e={};return this._inputEls.forEach((t=>{const s=t.name,o=t.value;e[s]=o})),e}setInputValues(e){for(let t=0;t<this._inputEls.length;t++)this._inputEls[t].value=e[t]}setEventListeners(){this._popForm.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t)}))}showLoading(){this._submitButton.textContent=this._loadingButtonText}hideLoading(){this._submitButton.textContent=this._buttonText}close(){this._popForm.reset(),super.close()}}class s{constructor(e,t,s,o,i){this._data=e,this.id=e._id,this.isLiked=e.isLiked,this._cardTemplate=document.querySelector(t).content.firstElementChild,this._handleImageClick=s,this._handleTrashIconClick=o,this._handleHeartIconClick=i}deleteCard(){this._cardElement.remove()}_renderLikes(){this.isLiked?this._cardElement.querySelector(".card__heart-icon").classList.add("card__heart-icon_active"):this._cardElement.querySelector(".card__heart-icon").classList.remove("card__heart-icon_active")}setIsLiked(e){this.isLiked=e,this._renderLikes()}_setEventListeners(){this._likeBtn=this._cardElement.querySelector(".card__heart-icon"),this._trashIcon=this._cardElement.querySelector(".card__trash-icon"),this._likeBtn.addEventListener("click",(()=>{this._handleHeartIconClick(this)})),this._trashIcon.addEventListener("click",(()=>{this._handleTrashIconClick(this)})),this._cardElementImage.addEventListener("click",(e=>{console.log(this._data),this._handleImageClick(this._data.name,this._data.link)}))}getCardElement(){return this._cardElement=this._cardTemplate.cloneNode(!0),this._cardElementTitle=this._cardElement.querySelector(".card__location"),this._cardElementImage=this._cardElement.querySelector(".card__image"),this._cardElementImage.src=this._data.link,this._cardElementImage.alt=this._data.name,this._cardElementTitle.textContent=this._data.name,this._imageModalElement=document.querySelector("#image-modal"),this._fullCard=this._imageModalElement.querySelector(".modal__full-img"),this._cardLocation=this._imageModalElement.querySelector(".modal__location"),this._renderLikes(),this._setEventListeners(),this._cardElement}}class o{constructor(e,t){this._options=e,this._formEl=t}_showInputError(e){this._errorEl=this._formEl.querySelector(`#${e.id}-error`),e.classList.add(this._options.inputErrorClass),this._errorEl.textContent=e.validationMessage,this._errorEl.classList.add(this._options.errorClass)}_hideInputError(e){this._errorEl=this._formEl.querySelector(`#${e.id}-error`),e.classList.remove(this._options.inputErrorClass),this._errorEl.textContent=" ",this._errorEl.classList.remove(this._options.errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_checkFormValidity=()=>this._inputEls.every((e=>e.validity.valid));toggleButtonState(){this._checkFormValidity()?(this._submitButton.classList.remove(this._options.inactiveButtonClass),this._submitButton.disabled=!1):(this._submitButton.classList.add(this._options.inactiveButtonClass),this._submitButton.disabled=!0)}_setEventListeners(){this._inputEls=Array.from(this._formEl.querySelectorAll(this._options.inputSelector)),this._submitButton=this._formEl.querySelector(this._options.submitButtonSelector),this._inputEls.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._formEl.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}document.querySelector("#card-template").content.firstElementChild;const i=document.querySelector("#edit-modal"),n=document.querySelector("#add-modal"),r=document.querySelector("#image-modal"),a=document.querySelector("#bio-image-modal"),l=document.querySelector(".bio__edit-button"),d=document.querySelector(".bio__add-button");function c(e){return new s(e,"#card-template",_,k,C).getCardElement()}document.querySelector(".modal__input-name"),document.querySelector(".modal__input-description"),document.querySelector(".modal__input-title"),document.querySelector(".modal__input-link"),document.querySelector(".bio__name"),document.querySelector(".bio__description"),document.querySelector(".cards__list"),n.querySelector("button"),i.querySelector("button"),i.querySelector(".modal__form"),n.querySelector(".modal__form"),r.querySelector(".modal__close"),l.addEventListener("click",(function(){const e=Object.values(h.getUserInfo());E.setInputValues(e),E.open()}));const h=new class{constructor(e,t,s){this._userName=document.querySelector(e),this._userJob=document.querySelector(t),this._userAvatar=document.querySelector(s)}getUserInfo(){return{name:this._userName.textContent,job:this._userJob.textContent,avatar:this._userAvatar.src}}setUserInfo(e,t){this._userName.textContent=e,this._userJob.textContent=t}setAvatar(e){this._userAvatar.src=e}}(".bio__name",".bio__description",".bio__image");function _(e,t){b.open(e,t)}d.addEventListener("click",(function(){g.open(),p.toggleButtonState()}));const u={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},m=new o(u,i),p=new o(u,n);new o(u,a).enableValidation(),m.enableValidation(),p.enableValidation();const E=new t({popUpSelector:"#edit-modal",handleFormSubmit:function(e){const t=e.title,s=e.description;E.showLoading(),y.handleBioDescriptionChange(t,s).then((e=>{h.setUserInfo(t,s),E.close()})).catch((e=>{console.error(e,"Could not add card!")})).finally((()=>{E.hideLoading()}))},loadingButtonText:"Saving"}),S=new t({popUpSelector:"#bio-image-modal",handleFormSubmit:function(e){S.showLoading(),y.handleBioImageChange(e["img-link"]).then((()=>{h.setAvatar(e["img-link"]),S.close()})).catch((e=>{console.error(e,"Could not add card!")})).finally((()=>{S.hideLoading()}))},loadingButtonText:"Saving"});S.setEventListeners(),E.setEventListeners(),document.querySelector(".bio__container").addEventListener("click",(()=>{S.open()}));const g=new t({popUpSelector:"#add-modal",handleFormSubmit:function(e){const t=e.title,s=e["img-link"];n.querySelector(".modal__button"),g.showLoading(),y.postNewCard(t,s).then((e=>{const t=c(e);L.addItem(t),g.close()})).catch((e=>{console.error(e,"Could not add card!")})).finally((()=>{g.hideLoading()}))},loadingButtonText:"Saving"});g.setEventListeners();const b=new class extends e{constructor(e){super({popUpSelector:e}),this._popUpSelector=e,this.popUpImage=this._popElement.querySelector(".modal__full-img"),this.popUpCaption=this._popElement.querySelector(".modal__location")}open(e,t){this.popUpImage.src=t,this.popUpCaption.textContent=e,this.popUpImage.alt=e,super.open()}}("#image-modal"),y=new class{constructor(e){this._baseUrl=e.baseURL,this._headers=e.headers}_processResponse=e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`);getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._processResponse)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._processResponse)}handleBioDescriptionChange(e,t){return fetch(`${this._baseUrl}/users/me/`,{headers:this._headers,method:"PATCH",body:JSON.stringify({about:e,name:t})}).then(this._processResponse)}handleLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{headers:this._headers,method:"PUT"}).then(this._processResponse)}handleUnlike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{headers:this._headers,method:"DELETE"}).then(this._processResponse)}handleBioImageChange(e){return fetch(`${this._baseUrl}/users/me/avatar`,{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e})}).then(this._processResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{headers:this._headers,method:"DELETE"}).then(this._processResponse)}postNewCard(e,t){return fetch(`${this._baseUrl}/cards`,{headers:this._headers,method:"POST",body:JSON.stringify({name:e,link:t})}).then(this._processResponse)}getCardsAndUserInfo(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}}({baseURL:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"e13faefd-227e-472c-9a3d-b6e42316321b","Content-Type":"application/json"}}),L=new class{constructor(e,t){let{items:s,renderer:o}=e;this.items=s,this._renderer=o,this._container=document.querySelector(t)}setItems(e){this.items=e}renderItems(){this.items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({items:[],renderer(e){const t=c(e);return L.addItem(t),t}},".cards__list");y.getCardsAndUserInfo().then((e=>{let[t,s]=e;L.setItems(s),L.renderItems(),h.setUserInfo(t.about,t.name),h.setAvatar(t.avatar)})).catch((e=>{console.error(e,"Could not get user info and card info")}));const f=new class extends e{constructor(e){let{popUpSelector:t,handleFormSubmit:s,loadingButtonText:o}=e;super({popUpSelector:t}),this._loadingButtonText=o,this._popForm=this._popElement.querySelector(".modal__form"),this._submitButton=this._popForm.querySelector(".modal__button"),this._buttonText=this._submitButton.textContent,this._handleFormSubmit=s}setSubmitHandler(e){this._handleFormSubmit=e}setEventListeners(){this._popForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit()}))}showLoading(){this._submitButton.textContent=this._loadingButtonText}hideLoading(){this._submitButton.textContent=this._buttonText}}({popUpSelector:"#deletecard-confirmation-modal",handleFormSubmit:v,loadingButtonText:"Saving"});function v(e){f.showLoading(),y.deleteCard(e.id).then((()=>{e.deleteCard(),f.close()})).catch((e=>{console.error(e,"Could not delete card!")})).finally((()=>{f.hideLoading()}))}function C(e){e.isLiked?y.handleUnlike(e.id).then((t=>{console.log(t),e.setIsLiked(t.isLiked)})).catch((e=>{console.error(e)})):y.handleLike(e.id).then((t=>{console.log(t),e.setIsLiked(t.isLiked)})).catch((e=>{console.error(e)}))}function k(e){f.open(),f.setSubmitHandler((()=>v(e)))}f.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q3RDRSxFQUErQkwsSUFFbkMsQ0FiQUUsRUFBdUI3SyxtQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Fyb3VuZCB0aGUgdXMgcHJvamVjdC8uL3NyYy9jb21wb25lbnRzL1BvcHVwLmpzIiwid2VicGFjazovL2Fyb3VuZCB0aGUgdXMgcHJvamVjdC8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8vYXJvdW5kIHRoZSB1cyBwcm9qZWN0Ly4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly9hcm91bmQgdGhlIHVzIHByb2plY3QvLi9zcmMvY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzIiwid2VicGFjazovL2Fyb3VuZCB0aGUgdXMgcHJvamVjdC8uL3NyYy9wYWdlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9hcm91bmQgdGhlIHVzIHByb2plY3QvLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qcyIsIndlYnBhY2s6Ly9hcm91bmQgdGhlIHVzIHByb2plY3QvLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly9hcm91bmQgdGhlIHVzIHByb2plY3QvLi9zcmMvY29tcG9uZW50cy9BUEkuanMiLCJ3ZWJwYWNrOi8vYXJvdW5kIHRoZSB1cyBwcm9qZWN0Ly4vc3JjL2NvbXBvbmVudHMvU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly9hcm91bmQgdGhlIHVzIHByb2plY3QvLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhDb25maXJtYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xuICBjb25zdHJ1Y3Rvcih7IHBvcFVwU2VsZWN0b3IgfSkge1xuICAgIHRoaXMuX3BvcEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvcFVwU2VsZWN0b3IpO1xuICAgIHRoaXMuX2Nsb3NlQnV0dG9uID0gdGhpcy5fcG9wRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19jbG9zZVwiKTtcbiAgfVxuICBvcGVuKCkge1xuICAgIHRoaXMuX3BvcEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcIm1vZGFsX29wZW5lZFwiKTtcblxuICAgIHRoaXMuX3BvcEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xuICAgIHRoaXMuX3BvcEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuX2Nsb3NlV2l0aENsaWNrKTtcbiAgfVxuICBjbG9zZSgpIHtcbiAgICB0aGlzLl9wb3BFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJtb2RhbF9vcGVuZWRcIik7XG5cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5fY2xvc2VXaXRoQ2xpY2spO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcbiAgICBjb25zb2xlLmxvZyhcImNsb3NlXCIpO1xuICB9XG4gIF9oYW5kbGVFc2NDbG9zZSA9IChldmVudCkgPT4ge1xuICAgIGlmIChldmVudC5rZXkgPT09IFwiRXNjYXBlXCIpIHtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gIH07XG4gIF9jbG9zZVdpdGhDbGljayA9IChldmVudCkgPT4ge1xuICAgIGlmIChcbiAgICAgIGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJtb2RhbF9fY2xvc2VcIikgfHxcbiAgICAgIGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJtb2RhbFwiKVxuICAgICkge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgfTtcblxuICBzZXRFdmVudExpc3RlbmVycygpIHtcbiAgICAvLyBjb25zdCBlZGl0Q2xvc2VCdXR0b24gPSBlZGl0TW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJidXR0b25cIik7XG4gICAgLy8gY29uc3QgYWRkQ2xvc2VCdXR0b24gPSBhZGRNb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvcihcImJ1dHRvblwiKTtcbiAgICAvKiAgIHRoaXMuX3BvcEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgICAgdGhpcy5fY2xvc2VXaXRoQ2xpY2soZXZlbnQpO1xuICAgIH0pO1xuICAgIHRoaXMuX3BvcEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgICAgdGhpcy5faGFuZGxlRXNjQ2xvc2UoZXZlbnQpO1xuICAgIH0pOyAqL1xuXG4gICAgdGhpcy5fY2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9KTtcblxuICAgIC8vIHRoaXMuX2Nsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAvLyAgIGFkZE1vZGFsVmFsaWRhdG9yLnRvZ2dsZUJ1dHRvblN0YXRlKCk7XG4gICAgLy8gfSlcbiAgfVxufVxuXG4vKlxuICAgIHRoaXMuX3BvcEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIG9wZW4pO1xuICAgIHRoaXMuX3BvcEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGNsb3NlKTtcbiAgICB0aGlzLl9wb3BFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBfaGFuZGxlRXNjQ2xvc2UpO1xuICB9ICovXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoRm9ybSBleHRlbmRzIFBvcHVwIHtcbiAgY29uc3RydWN0b3IoeyBwb3BVcFNlbGVjdG9yLCBoYW5kbGVGb3JtU3VibWl0LCBsb2FkaW5nQnV0dG9uVGV4dCB9KSB7XG4gICAgc3VwZXIoeyBwb3BVcFNlbGVjdG9yIH0pO1xuICAgIHRoaXMuX2xvYWRpbmdCdXR0b25UZXh0ID0gbG9hZGluZ0J1dHRvblRleHQ7XG4gICAgdGhpcy5fcG9wRm9ybSA9IHRoaXMuX3BvcEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fZm9ybVwiKTtcbiAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24gPSB0aGlzLl9wb3BGb3JtLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2J1dHRvblwiKTtcbiAgICB0aGlzLl9idXR0b25UZXh0ID0gdGhpcy5fc3VibWl0QnV0dG9uLnRleHRDb250ZW50O1xuICAgIC8vdGhpcy5fc2F2ZUJ1dHRvbiA9IHRoaXMuX3BvcEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fYnV0dG9uXCIpO1xuICAgIHRoaXMuX2lucHV0RWxzID0gQXJyYXkuZnJvbShcbiAgICAgIHRoaXMuX3BvcEZvcm0ucXVlcnlTZWxlY3RvckFsbChcIi5tb2RhbF9faW5wdXRcIilcbiAgICApO1xuICB9XG4gIF9nZXRJbnB1dFZhbHVlcygpIHtcbiAgICBjb25zdCBpbnB1dEVsc09iaiA9IHt9O1xuICAgIHRoaXMuX2lucHV0RWxzLmZvckVhY2goKGlucHV0KSA9PiB7XG4gICAgICBjb25zdCBrZXkgPSBpbnB1dC5uYW1lO1xuICAgICAgY29uc3QgdmFsdWUgPSBpbnB1dC52YWx1ZTtcbiAgICAgIGlucHV0RWxzT2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gaW5wdXRFbHNPYmo7XG4gICAgLy8gIHNlbGVjdCBhbGwgaW5wdXQgZWxlbWVudHMgZnJvbSBkb20gYW5kIHJldHVybiBhbiBvYmplY3Qgd2l0aCB0aGUgbmFtZSBvZiB0aGUgaW5wdXQgYW5kIGl0J3MgdmFsdWUgdXBvbiBzdWJtaXNzaW9uXG4gIH1cbiAgc2V0SW5wdXRWYWx1ZXMoYXJyKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9pbnB1dEVscy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5faW5wdXRFbHNbaV0udmFsdWUgPSBhcnJbaV07XG4gICAgfVxuICB9XG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMuX3BvcEZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZSkgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBjb25zdCBpbnB1dFZhbHVlcyA9IHRoaXMuX2dldElucHV0VmFsdWVzKCk7XG4gICAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0KGlucHV0VmFsdWVzKTtcbiAgICB9KTtcbiAgfVxuICBzaG93TG9hZGluZygpIHtcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24udGV4dENvbnRlbnQgPSB0aGlzLl9sb2FkaW5nQnV0dG9uVGV4dDtcbiAgfVxuXG4gIGhpZGVMb2FkaW5nKCkge1xuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IHRoaXMuX2J1dHRvblRleHQ7XG4gIH1cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5fcG9wRm9ybS5yZXNldCgpO1xuICAgIHN1cGVyLmNsb3NlKCk7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcmQge1xuICBjb25zdHJ1Y3RvcihcbiAgICBkYXRhLFxuICAgIGNhcmRUZW1wbGF0ZVNlbGVjdG9yLFxuICAgIGhhbmRsZUltYWdlQ2xpY2ssXG4gICAgaGFuZGxlVHJhc2hJY29uQ2xpY2ssXG4gICAgaGFuZGxlSGVhcnRJY29uQ2xpY2tcbiAgKSB7XG4gICAgdGhpcy5fZGF0YSA9IGRhdGE7IC8vdGhpcy5fZGF0YS5uYW1lXG4gICAgdGhpcy5pZCA9IGRhdGEuX2lkO1xuICAgIHRoaXMuaXNMaWtlZCA9IGRhdGEuaXNMaWtlZDtcbiAgICB0aGlzLl9jYXJkVGVtcGxhdGUgPVxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihjYXJkVGVtcGxhdGVTZWxlY3RvcikuY29udGVudC5maXJzdEVsZW1lbnRDaGlsZDsgLy8gY29uc3QgY2FyZCA9IG5ldyBDYXJkKGNhcmREdGF0LCAjY2FyZC10ZW1wbGF0ZSwgaGFuZGxlSW1hZ2VDbGljaylcbiAgICB0aGlzLl9oYW5kbGVJbWFnZUNsaWNrID0gaGFuZGxlSW1hZ2VDbGljaztcbiAgICB0aGlzLl9oYW5kbGVUcmFzaEljb25DbGljayA9IGhhbmRsZVRyYXNoSWNvbkNsaWNrO1xuICAgIHRoaXMuX2hhbmRsZUhlYXJ0SWNvbkNsaWNrID0gaGFuZGxlSGVhcnRJY29uQ2xpY2s7XG4gIH1cblxuICBkZWxldGVDYXJkKCkge1xuICAgIHRoaXMuX2NhcmRFbGVtZW50LnJlbW92ZSgpO1xuICB9XG4gIF9yZW5kZXJMaWtlcygpIHtcbiAgICBpZiAodGhpcy5pc0xpa2VkKSB7XG4gICAgICB0aGlzLl9jYXJkRWxlbWVudFxuICAgICAgICAucXVlcnlTZWxlY3RvcihcIi5jYXJkX19oZWFydC1pY29uXCIpXG4gICAgICAgIC5jbGFzc0xpc3QuYWRkKFwiY2FyZF9faGVhcnQtaWNvbl9hY3RpdmVcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2NhcmRFbGVtZW50XG4gICAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2hlYXJ0LWljb25cIilcbiAgICAgICAgLmNsYXNzTGlzdC5yZW1vdmUoXCJjYXJkX19oZWFydC1pY29uX2FjdGl2ZVwiKTtcbiAgICB9XG4gIH1cbiAgc2V0SXNMaWtlZChpc0xpa2VkKSB7XG4gICAgdGhpcy5pc0xpa2VkID0gaXNMaWtlZDtcbiAgICB0aGlzLl9yZW5kZXJMaWtlcygpO1xuICB9XG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLl9saWtlQnRuID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19oZWFydC1pY29uXCIpO1xuXG4gICAgdGhpcy5fdHJhc2hJY29uID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX190cmFzaC1pY29uXCIpO1xuICAgIHRoaXMuX2xpa2VCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHRoaXMuX2hhbmRsZUhlYXJ0SWNvbkNsaWNrKHRoaXMpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fdHJhc2hJY29uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICB0aGlzLl9oYW5kbGVUcmFzaEljb25DbGljayh0aGlzKTsgLy90aGlzIHJlcHJlc2VudHMgdGhlIGluc3RhbmNlIG9mIHRoZSBDYXJkXG4gICAgfSk7XG4gICAgdGhpcy5fY2FyZEVsZW1lbnRJbWFnZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKHRoaXMuX2RhdGEpO1xuICAgICAgdGhpcy5faGFuZGxlSW1hZ2VDbGljayh0aGlzLl9kYXRhLm5hbWUsIHRoaXMuX2RhdGEubGluayk7XG4gICAgfSk7XG4gIH1cblxuICBnZXRDYXJkRWxlbWVudCgpIHtcbiAgICB0aGlzLl9jYXJkRWxlbWVudCA9IHRoaXMuX2NhcmRUZW1wbGF0ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgdGhpcy5fY2FyZEVsZW1lbnRUaXRsZSA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbG9jYXRpb25cIik7XG4gICAgdGhpcy5fY2FyZEVsZW1lbnRJbWFnZSA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2VcIik7XG4gICAgdGhpcy5fY2FyZEVsZW1lbnRJbWFnZS5zcmMgPSB0aGlzLl9kYXRhLmxpbms7XG4gICAgdGhpcy5fY2FyZEVsZW1lbnRJbWFnZS5hbHQgPSB0aGlzLl9kYXRhLm5hbWU7XG4gICAgdGhpcy5fY2FyZEVsZW1lbnRUaXRsZS50ZXh0Q29udGVudCA9IHRoaXMuX2RhdGEubmFtZTtcblxuICAgIHRoaXMuX2ltYWdlTW9kYWxFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNpbWFnZS1tb2RhbFwiKTtcbiAgICB0aGlzLl9mdWxsQ2FyZCA9IHRoaXMuX2ltYWdlTW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2Z1bGwtaW1nXCIpO1xuICAgIHRoaXMuX2NhcmRMb2NhdGlvbiA9XG4gICAgICB0aGlzLl9pbWFnZU1vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19sb2NhdGlvblwiKTtcbiAgICB0aGlzLl9yZW5kZXJMaWtlcygpO1xuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgLyp0aGlzLl9jYXJkRWxlbWVudEltYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgb3Blbk1vZGFsKHRoaXMuX2ltYWdlTW9kYWxFbGVtZW50KTtcbiAgICAgIHRoaXMuX2Z1bGxDYXJkLnNyYyA9IGUudGFyZ2V0LnNyYztcbiAgICAgIHRoaXMuX2NhcmRMb2NhdGlvbi5pbm5lclRleHQgPSBlLnRhcmdldC5hbHQ7XG4gICAgICB0aGlzLl9mdWxsQ2FyZC5hbHQgPSBlLnRhcmdldC5hbHQ7XG4gICAgfSk7Ki9cblxuICAgIHJldHVybiB0aGlzLl9jYXJkRWxlbWVudDtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9ybVZhbGlkYXRvciB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMsIGZvcm1FbCkge1xuICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuX2Zvcm1FbCA9IGZvcm1FbDtcbiAgfVxuXG4gIF9zaG93SW5wdXRFcnJvcihpbnB1dEVsKSB7XG4gICAgdGhpcy5fZXJyb3JFbCA9IHRoaXMuX2Zvcm1FbC5xdWVyeVNlbGVjdG9yKGAjJHtpbnB1dEVsLmlkfS1lcnJvcmApO1xuICAgIGlucHV0RWwuY2xhc3NMaXN0LmFkZCh0aGlzLl9vcHRpb25zLmlucHV0RXJyb3JDbGFzcyk7XG5cbiAgICB0aGlzLl9lcnJvckVsLnRleHRDb250ZW50ID0gaW5wdXRFbC52YWxpZGF0aW9uTWVzc2FnZTtcbiAgICB0aGlzLl9lcnJvckVsLmNsYXNzTGlzdC5hZGQodGhpcy5fb3B0aW9ucy5lcnJvckNsYXNzKTtcbiAgfVxuICBfaGlkZUlucHV0RXJyb3IoaW5wdXRFbCkge1xuICAgIHRoaXMuX2Vycm9yRWwgPSB0aGlzLl9mb3JtRWwucXVlcnlTZWxlY3RvcihgIyR7aW5wdXRFbC5pZH0tZXJyb3JgKTtcbiAgICBpbnB1dEVsLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fb3B0aW9ucy5pbnB1dEVycm9yQ2xhc3MpO1xuICAgIHRoaXMuX2Vycm9yRWwudGV4dENvbnRlbnQgPSBcIiBcIjtcbiAgICB0aGlzLl9lcnJvckVsLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fb3B0aW9ucy5lcnJvckNsYXNzKTtcbiAgfVxuXG4gIF9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbCkge1xuICAgIGlmICghaW5wdXRFbC52YWxpZGl0eS52YWxpZCkge1xuICAgICAgdGhpcy5fc2hvd0lucHV0RXJyb3IoaW5wdXRFbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWwpO1xuICAgIH1cbiAgfVxuICBfY2hlY2tGb3JtVmFsaWRpdHkgPSAoKSA9PlxuICAgIHRoaXMuX2lucHV0RWxzLmV2ZXJ5KChpbnB1dCkgPT4gaW5wdXQudmFsaWRpdHkudmFsaWQpO1xuXG4gIHRvZ2dsZUJ1dHRvblN0YXRlKCkge1xuICAgIC8vIGxldCBpc0luVmFsaWQgPSBmYWxzZTtcbiAgICAvLyBjb25zb2xlLmxvZyhcImhlbGxvIHR0XCIpO1xuICAgIC8vIHRoaXMuX2lucHV0RWxzLmZvckVhY2goKGlucHV0RWwpID0+IHtcbiAgICAvLyAgIGlmICghaW5wdXRFbC52YWxpZGl0eS52YWxpZCkge1xuICAgIC8vICAgICBpc0luVmFsaWQgPSB0cnVlO1xuICAgIC8vICAgfVxuICAgIC8vIH0pO1xuXG4gICAgY29uc3QgaXNGb3JtVmFsaWQgPSB0aGlzLl9jaGVja0Zvcm1WYWxpZGl0eSgpO1xuXG4gICAgaWYgKCFpc0Zvcm1WYWxpZCkge1xuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5fb3B0aW9ucy5pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX29wdGlvbnMuaW5hY3RpdmVCdXR0b25DbGFzcyk7XG4gICAgICB0aGlzLl9zdWJtaXRCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5faW5wdXRFbHMgPSBBcnJheS5mcm9tKFxuICAgICAgdGhpcy5fZm9ybUVsLnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5fb3B0aW9ucy5pbnB1dFNlbGVjdG9yKVxuICAgICk7XG4gICAgdGhpcy5fc3VibWl0QnV0dG9uID0gdGhpcy5fZm9ybUVsLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICB0aGlzLl9vcHRpb25zLnN1Ym1pdEJ1dHRvblNlbGVjdG9yXG4gICAgKTtcbiAgICB0aGlzLl9pbnB1dEVscy5mb3JFYWNoKChpbnB1dEVsKSA9PiB7XG4gICAgICBpbnB1dEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoZSkgPT4ge1xuICAgICAgICB0aGlzLl9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbCk7XG4gICAgICAgIHRoaXMudG9nZ2xlQnV0dG9uU3RhdGUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIGVuYWJsZVZhbGlkYXRpb24oKSB7XG4gICAgLy8gICAgIHRoaXMuZm9ybUVscyA9IEFycmF5LmZyb20oXG4gICAgLy8gICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9vcHRpb25zLmZvcm1TZWxlY3RvcilcbiAgICAvLyAgICAgKTtcbiAgICAvLyAgICAgdGhpcy5mb3JtRWxzLmZvckVhY2goKGZvcm1FbCkgPT4ge1xuICAgIC8vICAgICAgIGZvcm1FbC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChlKSA9PiB7XG4gICAgLy8gICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgLy8gICAgICAgfSk7XG4gICAgLy8gICAgICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoZm9ybUVsLCB0aGlzLl9vcHRpb25zKTtcbiAgICAvLyAgICAgfSk7XG4gICAgLy8gICB9XG4gICAgLy9cblxuICAgIHRoaXMuX2Zvcm1FbC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChlKSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxufVxuIiwiaW1wb3J0IFBvcHVwV2l0aEZvcm0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qc1wiO1xuaW1wb3J0IENhcmQgZnJvbSBcIi4uL2NvbXBvbmVudHMvQ2FyZC5qc1wiO1xuaW1wb3J0IEZvcm1WYWxpZGF0b3IgZnJvbSBcIi4uL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qc1wiO1xuaW1wb3J0IFNlY3Rpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvU2VjdGlvbi5qc1wiO1xuaW1wb3J0IFwiLi9pbmRleC5jc3NcIjtcbmltcG9ydCBVc2VySW5mbyBmcm9tIFwiLi4vY29tcG9uZW50cy9Vc2VySW5mby5qc1wiO1xuaW1wb3J0IFBvcHVwV2l0aEltYWdlIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzXCI7XG5pbXBvcnQgQVBJIGZyb20gXCIuLi9jb21wb25lbnRzL0FQSS5qc1wiO1xuaW1wb3J0IFBvcHVwV2l0aENvbmZpcm1hdGlvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhDb25maXJtYXRpb24uanNcIjtcbi8qIGNvbnN0IGluaXRpYWxDYXJkcyA9IFtcbiAge1xuICAgIG5hbWU6IFwiWW9zZW1pdGUgVmFsbGV5XCIsXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L3lvc2VtaXRlLmpwZ1wiLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJMYWtlIExvdWlzZVwiLFxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9sYWtlLWxvdWlzZS5qcGdcIixcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiQmFsZCBNb3VudGFpbnNcIixcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvYmFsZC1tb3VudGFpbnMuanBnXCIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkxhdGVtYXJcIixcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvbGF0ZW1hci5qcGdcIixcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiVmFub2lzZSBOYXRpb25hbCBQYXJrXCIsXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L3Zhbm9pc2UuanBnXCIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkxhZ28gZGkgQnJhaWVzXCIsXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2xhZ28uanBnXCIsXG4gIH0sXG5dO1xuICovXG5jb25zdCBjYXJkVGVtcGxhdGUgPVxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NhcmQtdGVtcGxhdGVcIikuY29udGVudC5maXJzdEVsZW1lbnRDaGlsZDtcbmNvbnN0IGVkaXRNb2RhbEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2VkaXQtbW9kYWxcIik7XG5jb25zdCBhZGRNb2RhbEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FkZC1tb2RhbFwiKTtcbmNvbnN0IGltYWdlTW9kYWxFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNpbWFnZS1tb2RhbFwiKTtcbmNvbnN0IGJpb0ltYWdlTW9kYWxFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNiaW8taW1hZ2UtbW9kYWxcIik7XG5jb25zdCBlZGl0UHJvZmlsZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYmlvX19lZGl0LWJ1dHRvblwiKTtcbmNvbnN0IGFkZFByb2ZpbGVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmJpb19fYWRkLWJ1dHRvblwiKTtcbmNvbnN0IG5hbWVJbnB1dEZpZWxkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9faW5wdXQtbmFtZVwiKTtcbmNvbnN0IGRlc2NyaXB0aW9uSW5wdXRGaWVsZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gIFwiLm1vZGFsX19pbnB1dC1kZXNjcmlwdGlvblwiXG4pO1xuY29uc3QgdGl0bGVJbnB1dEZpZWxkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9faW5wdXQtdGl0bGVcIik7XG5jb25zdCBsaW5rSW5wdXRGaWVsZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2lucHV0LWxpbmtcIik7XG5jb25zdCBiaW9OYW1lRmllbGQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmJpb19fbmFtZVwiKTtcbmNvbnN0IGJpb0Rlc2NyaXB0aW9uRmllbGQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmJpb19fZGVzY3JpcHRpb25cIik7XG5jb25zdCBjYXJkTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZHNfX2xpc3RcIik7XG5jb25zdCBhZGRDbG9zZUJ1dHRvbiA9IGFkZE1vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiYnV0dG9uXCIpO1xuY29uc3QgZWRpdENsb3NlQnV0dG9uID0gZWRpdE1vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiYnV0dG9uXCIpO1xuY29uc3QgZWRpdEZvcm1FbGVtZW50ID0gZWRpdE1vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19mb3JtXCIpO1xuY29uc3QgYWRkRm9ybUVsZW1lbnQgPSBhZGRNb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fZm9ybVwiKTtcbmNvbnN0IGltYWdlQ2xvc2VCdXR0b24gPSBpbWFnZU1vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19jbG9zZVwiKTtcbmNvbnN0IG9wZW5lZFBvcFVwID0gXCJcIjtcblxuZnVuY3Rpb24gY3JlYXRlQ2FyZChjYXJkRGF0YSkge1xuICBjb25zdCBjYXJkID0gbmV3IENhcmQoXG4gICAgY2FyZERhdGEsXG4gICAgXCIjY2FyZC10ZW1wbGF0ZVwiLFxuICAgIGhhbmRsZUltYWdlQ2xpY2ssXG4gICAgaGFuZGxlVHJhc2hJY29uQ2xpY2ssXG4gICAgaGFuZGxlSGVhcnRJY29uQ2xpY2tcbiAgKTtcbiAgY29uc3QgY2FyZEVsZW1lbnQgPSBjYXJkLmdldENhcmRFbGVtZW50KCk7XG4gIHJldHVybiBjYXJkRWxlbWVudDtcbn1cbi8qIGFkZEZvcm1FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgZnVuY3Rpb24gKGUpIHtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICBjb25zdCBuYW1lT2ZQbGFjZSA9IHRpdGxlSW5wdXRGaWVsZC52YWx1ZTtcbiAgY29uc3QgdXJsID0gbGlua0lucHV0RmllbGQudmFsdWU7XG4gIGNvbnN0IGNyZWF0ZWRDYXJkID0geyBuYW1lOiBuYW1lT2ZQbGFjZSwgbGluazogdXJsIH07XG4gIC8vIGNvbnN0IG5ld0NhcmQgPSBuZXcgQ2FyZChjcmVhdGVkQ2FyZCwgXCIjY2FyZC10ZW1wbGF0ZVwiLCBoYW5kbGVJbWFnZUNsaWNrKTtcbiAgLy8gY29uc3QgaHRtbENhcmQgPSBuZXdDYXJkLmdldENhcmRFbGVtZW50KCk7XG4gIGNvbnN0IGNhcmRFbGVtZW50ID0gY3JlYXRlQ2FyZChjcmVhdGVkQ2FyZCk7XG4gIGNhcmRFbGVtZW50cy5hZGRJdGVtKGNhcmRFbGVtZW50KTtcbiAgdGl0bGVJbnB1dEZpZWxkLnZhbHVlID0gXCJcIjtcbiAgbGlua0lucHV0RmllbGQudmFsdWUgPSBcIlwiO1xuICBhZGRNb2RhbFZhbGlkYXRvci50b2dnbGVCdXR0b25TdGF0ZSgpO1xuICBhZGRQb3BVcC5jbG9zZSgpO1xuICAvLyBjbG9zZU1vZGFsKGFkZE1vZGFsRWxlbWVudCk7XG59KTsgKi9cbi8qIGVkaXRDbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICBwcm9maWxlUG9wVXAuY2xvc2UoKTtcbn0pO1xuYWRkQ2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgYWRkUG9wVXAuY2xvc2UoKTtcbn0pOyAqL1xuZWRpdFByb2ZpbGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgLyogICBuYW1lSW5wdXRGaWVsZC52YWx1ZSA9IGJpb05hbWVGaWVsZC5pbm5lclRleHQ7XG4gIGRlc2NyaXB0aW9uSW5wdXRGaWVsZC52YWx1ZSA9IGJpb0Rlc2NyaXB0aW9uRmllbGQuaW5uZXJUZXh0OyAqL1xuICBjb25zdCB1c2VySW5mbyA9IE9iamVjdC52YWx1ZXModXNlck9uZS5nZXRVc2VySW5mbygpKTtcbiAgcHJvZmlsZVBvcFVwLnNldElucHV0VmFsdWVzKHVzZXJJbmZvKTtcbiAgcHJvZmlsZVBvcFVwLm9wZW4oKTtcbn0pO1xuY29uc3QgdXNlck9uZSA9IG5ldyBVc2VySW5mbyhcIi5iaW9fX25hbWVcIiwgXCIuYmlvX19kZXNjcmlwdGlvblwiLCBcIi5iaW9fX2ltYWdlXCIpO1xuXG5mdW5jdGlvbiBoYW5kbGVJbWFnZUNsaWNrKG5hbWUsIGxpbmspIHtcbiAgaW1hZ2VQb3BVcC5vcGVuKG5hbWUsIGxpbmspO1xufVxuXG4vKmluaXRpYWxDYXJkcy5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhKSB7XG4gIGxldCBjYXJkRWwgPSBjcmVhdGVDYXJkKGRhdGEpO1xuICBjYXJkTGlzdC5hcHBlbmQoY2FyZEVsKTtcbn0pOyovXG5cbi8qIGluaXRpYWxDYXJkcy5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhKSB7XG4gIGNvbnN0IGNhcmRFbGVtZW50ID0gY3JlYXRlQ2FyZChkYXRhKTtcbiAgY2FyZExpc3QuYXBwZW5kKGNhcmRFbGVtZW50KTtcbn0pOyAqL1xuXG5hZGRQcm9maWxlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gIGFkZFBvcFVwLm9wZW4oKTtcblxuICBhZGRNb2RhbFZhbGlkYXRvci50b2dnbGVCdXR0b25TdGF0ZSgpO1xufSk7XG5cbi8qIGNhcmRJbWFnZXMuZm9yRWFjaCgoY2FyZEltYWdlKSA9PiB7XG4gIGNhcmRJbWFnZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICBvcGVuTW9kYWwoaW1hZ2VNb2RhbEVsZW1lbnQpO1xuICAgIGZ1bGxDYXJkLnNyYyA9IGUudGFyZ2V0LnNyYztcbiAgICBjYXJkTG9jYXRpb24uaW5uZXJUZXh0ID0gZS50YXJnZXQuYWx0O1xuICAgIGNhcmRFbGVtZW50SW1hZ2UuYWx0ID0gZS50YXJnZXQuYWx0O1xuICB9KTtcbn0pOyAqL1xuXG5mdW5jdGlvbiBjbG9zZVdpdGhFc2NhcGVLZXkoZXZlbnQpIHtcbiAgaWYgKGV2ZW50LmtleSA9PT0gXCJFc2NhcGVcIikge1xuICAgIGNvbnN0IG9wZW5Qb3BVcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfb3BlbmVkXCIpO1xuICAgIGNsb3NlTW9kYWwob3BlblBvcFVwKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjbG9zZVdpdGhDbGljayhldmVudCkge1xuICBpZiAoZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcIm1vZGFsXCIpKSB7XG4gICAgY2xvc2VNb2RhbChldmVudC50YXJnZXQpO1xuICB9XG59XG5cbmNvbnN0IGNvbmZpZyA9IHtcbiAgZm9ybVNlbGVjdG9yOiBcIi5tb2RhbF9fZm9ybVwiLFxuICBpbnB1dFNlbGVjdG9yOiBcIi5tb2RhbF9faW5wdXRcIixcbiAgc3VibWl0QnV0dG9uU2VsZWN0b3I6IFwiLm1vZGFsX19idXR0b25cIixcbiAgaW5hY3RpdmVCdXR0b25DbGFzczogXCJtb2RhbF9fYnV0dG9uX2Rpc2FibGVkXCIsXG4gIGlucHV0RXJyb3JDbGFzczogXCJtb2RhbF9faW5wdXRfdHlwZV9lcnJvclwiLFxuICBlcnJvckNsYXNzOiBcIm1vZGFsX19lcnJvcl92aXNpYmxlXCIsXG59O1xuY29uc3Qgb3B0aW9ucyA9IHtcbiAgYmFzZVVSTDogXCJodHRwczovL2Fyb3VuZC1hcGkuZW4udHJpcGxldGVuLXNlcnZpY2VzLmNvbS92MVwiLFxuICBoZWFkZXJzOiB7XG4gICAgYXV0aG9yaXphdGlvbjogXCJlMTNmYWVmZC0yMjdlLTQ3MmMtOWEzZC1iNmU0MjMxNjMyMWJcIixcbiAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgfSxcbn07XG5jb25zdCBlZGl0TW9kYWxWYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihjb25maWcsIGVkaXRNb2RhbEVsZW1lbnQpO1xuY29uc3QgYWRkTW9kYWxWYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihjb25maWcsIGFkZE1vZGFsRWxlbWVudCk7XG5jb25zdCBlZGl0QmlvTW9kYWxWYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihjb25maWcsIGJpb0ltYWdlTW9kYWxFbGVtZW50KTtcblxuZWRpdEJpb01vZGFsVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcbmVkaXRNb2RhbFZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XG5hZGRNb2RhbFZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XG5cbmZ1bmN0aW9uIGhhbmRsZVByb2ZpbGVTdWJtaXQoaW5wdXRFbHNPYmopIHtcbiAgY29uc3QgaW5wdXRLZXkgPSBpbnB1dEVsc09ialtcInRpdGxlXCJdO1xuICBjb25zdCBpbnB1dFZhbHVlID0gaW5wdXRFbHNPYmpbXCJkZXNjcmlwdGlvblwiXTtcbiAgcHJvZmlsZVBvcFVwLnNob3dMb2FkaW5nKCk7XG4gIGZpcnN0QVBJXG4gICAgLmhhbmRsZUJpb0Rlc2NyaXB0aW9uQ2hhbmdlKGlucHV0S2V5LCBpbnB1dFZhbHVlKVxuICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICB1c2VyT25lLnNldFVzZXJJbmZvKGlucHV0S2V5LCBpbnB1dFZhbHVlKTtcbiAgICAgIHByb2ZpbGVQb3BVcC5jbG9zZSgpO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyLCBcIkNvdWxkIG5vdCBhZGQgY2FyZCFcIik7XG4gICAgfSlcbiAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICBwcm9maWxlUG9wVXAuaGlkZUxvYWRpbmcoKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGhhbmRsZUFkZENhcmRTdWJtaXQoaW5wdXRFbHNPYmopIHtcbiAgY29uc3QgbmFtZSA9IGlucHV0RWxzT2JqW1widGl0bGVcIl07XG4gIGNvbnN0IGxpbmsgPSBpbnB1dEVsc09ialtcImltZy1saW5rXCJdO1xuICBjb25zdCBidG4gPSBhZGRNb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fYnV0dG9uXCIpO1xuXG4gIC8vY29uc3QgY2FyZEVsID0gY3JlYXRlQ2FyZCh7IG5hbWUsIGxpbmsgfSk7IC8ve25hbWU6IG5hbWUsIGxpbms6IGxpbmt9XG4gIGFkZFBvcFVwLnNob3dMb2FkaW5nKCk7XG4gIGZpcnN0QVBJXG4gICAgLnBvc3ROZXdDYXJkKG5hbWUsIGxpbmspXG4gICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgIGNvbnN0IGNhcmRFbCA9IGNyZWF0ZUNhcmQoZGF0YSk7XG4gICAgICBjYXJkRWxlbWVudHMuYWRkSXRlbShjYXJkRWwpO1xuICAgICAgYWRkUG9wVXAuY2xvc2UoKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKGVyciwgXCJDb3VsZCBub3QgYWRkIGNhcmQhXCIpO1xuICAgIH0pXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgYWRkUG9wVXAuaGlkZUxvYWRpbmcoKTtcbiAgICB9KTtcbn1cblxuLy9jb25zdCBidG4gPSBlZGl0TW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2J1dHRvblwiKTtcblxuLy9idG4udGV4dENvbnRlbnQgPSBcIlNhdmluZ1wiO1xuY29uc3QgcHJvZmlsZVBvcFVwID0gbmV3IFBvcHVwV2l0aEZvcm0oe1xuICBwb3BVcFNlbGVjdG9yOiBcIiNlZGl0LW1vZGFsXCIsXG4gIGhhbmRsZUZvcm1TdWJtaXQ6IGhhbmRsZVByb2ZpbGVTdWJtaXQsXG4gIGxvYWRpbmdCdXR0b25UZXh0OiBcIlNhdmluZ1wiLFxufSk7XG5cbmNvbnN0IHByb2ZpbGVJbWFnZVBvcFVwID0gbmV3IFBvcHVwV2l0aEZvcm0oe1xuICBwb3BVcFNlbGVjdG9yOiBcIiNiaW8taW1hZ2UtbW9kYWxcIixcbiAgaGFuZGxlRm9ybVN1Ym1pdDogaGFuZGxlSW1hZ2VQcm9maWxlU3VibWl0LFxuICBsb2FkaW5nQnV0dG9uVGV4dDogXCJTYXZpbmdcIixcbn0pO1xuXG5wcm9maWxlSW1hZ2VQb3BVcC5zZXRFdmVudExpc3RlbmVycygpO1xucHJvZmlsZVBvcFVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbmZ1bmN0aW9uIGhhbmRsZUltYWdlUHJvZmlsZVN1Ym1pdChpbnB1dFZhbHVlcykge1xuICBwcm9maWxlSW1hZ2VQb3BVcC5zaG93TG9hZGluZygpO1xuICBmaXJzdEFQSVxuICAgIC5oYW5kbGVCaW9JbWFnZUNoYW5nZShpbnB1dFZhbHVlc1tcImltZy1saW5rXCJdKVxuICAgIC50aGVuKCgpID0+IHtcbiAgICAgIHVzZXJPbmUuc2V0QXZhdGFyKGlucHV0VmFsdWVzW1wiaW1nLWxpbmtcIl0pO1xuICAgICAgcHJvZmlsZUltYWdlUG9wVXAuY2xvc2UoKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKGVyciwgXCJDb3VsZCBub3QgYWRkIGNhcmQhXCIpO1xuICAgIH0pXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgcHJvZmlsZUltYWdlUG9wVXAuaGlkZUxvYWRpbmcoKTtcbiAgICB9KTtcbn1cblxuY29uc3QgYmlvQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5iaW9fX2NvbnRhaW5lclwiKTtcbmJpb0NvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICBwcm9maWxlSW1hZ2VQb3BVcC5vcGVuKCk7XG59KTtcblxuY29uc3QgYWRkUG9wVXAgPSBuZXcgUG9wdXBXaXRoRm9ybSh7XG4gIHBvcFVwU2VsZWN0b3I6IFwiI2FkZC1tb2RhbFwiLFxuICBoYW5kbGVGb3JtU3VibWl0OiBoYW5kbGVBZGRDYXJkU3VibWl0LFxuICBsb2FkaW5nQnV0dG9uVGV4dDogXCJTYXZpbmdcIixcbn0pO1xuYWRkUG9wVXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuY29uc3QgaW1hZ2VQb3BVcCA9IG5ldyBQb3B1cFdpdGhJbWFnZShcIiNpbWFnZS1tb2RhbFwiKTtcbmNvbnN0IGZpcnN0QVBJID0gbmV3IEFQSShvcHRpb25zKTtcbmNvbnN0IGNhcmRFbGVtZW50cyA9IG5ldyBTZWN0aW9uKFxuICB7XG4gICAgaXRlbXM6IFtdLFxuICAgIHJlbmRlcmVyKGl0ZW0pIHtcbiAgICAgIGNvbnN0IGNhcmQgPSBjcmVhdGVDYXJkKGl0ZW0pO1xuICAgICAgY2FyZEVsZW1lbnRzLmFkZEl0ZW0oY2FyZCk7XG4gICAgICByZXR1cm4gY2FyZDtcbiAgICB9LFxuICB9LFxuICBcIi5jYXJkc19fbGlzdFwiXG4pO1xuXG4vKiBmaXJzdEFQSVxuICAuZ2V0SW5pdGlhbENhcmRzKClcbiAgLnRoZW4oKGNhcmRzKSA9PiB7XG4gICAgY2FyZEVsZW1lbnRzLnNldEl0ZW1zKGNhcmRzKTtcbiAgICBjYXJkRWxlbWVudHMucmVuZGVySXRlbXMoKTtcbiAgfSlcbiAgLmNhdGNoKChlcnIpID0+IHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgYWxlcnQoZXJyLCBcIkNvdWxkIG5vdCBnZXQgaW5pdGlhbCBjYXJkcyFcIik7XG4gIH0pO1xuXG5maXJzdEFQSS5nZXRVc2VySW5mbygpLnRoZW4oKGRhdGEpID0+IHtcbiAgY29uc29sZS5sb2coZGF0YSk7XG4gIHVzZXJPbmUuc2V0VXNlckluZm8oZGF0YS5hYm91dCwgZGF0YS5uYW1lLCBkYXRhLmF2YXRhcik7XG59KTtcbiAqL1xuZmlyc3RBUElcbiAgLmdldENhcmRzQW5kVXNlckluZm8oKVxuICAudGhlbigoW3VzZXJJbmZvLCBjYXJkc10pID0+IHtcbiAgICAvLyBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICAvLyBjb25zb2xlLmxvZyhcInVzZXJpbmZvXCIsIGRhdGFbMF0pO1xuICAgIC8vIGNvbnNvbGUubG9nKFwiY2FyZHNcIiwgZGF0YVsxXSk7XG4gICAgLy9jb25zb2xlLmxvZyh7IHVzZXJJbmZvLCBjYXJkcyB9KTtcbiAgICBjYXJkRWxlbWVudHMuc2V0SXRlbXMoY2FyZHMpO1xuICAgIGNhcmRFbGVtZW50cy5yZW5kZXJJdGVtcygpO1xuICAgIHVzZXJPbmUuc2V0VXNlckluZm8odXNlckluZm8uYWJvdXQsIHVzZXJJbmZvLm5hbWUpO1xuICAgIHVzZXJPbmUuc2V0QXZhdGFyKHVzZXJJbmZvLmF2YXRhcik7XG4gIH0pXG4gIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgY29uc29sZS5lcnJvcihlcnIsIFwiQ291bGQgbm90IGdldCB1c2VyIGluZm8gYW5kIGNhcmQgaW5mb1wiKTtcbiAgfSk7XG5cbmNvbnN0IGRlbGV0ZUNhcmRDb25maXJtYXRpb24gPSBuZXcgUG9wdXBXaXRoQ29uZmlybWF0aW9uKHtcbiAgcG9wVXBTZWxlY3RvcjogXCIjZGVsZXRlY2FyZC1jb25maXJtYXRpb24tbW9kYWxcIixcbiAgaGFuZGxlRm9ybVN1Ym1pdDogaGFuZGxlRGVsZXRlQ29uZmlybWF0aW9uU3VibWl0LFxuICBsb2FkaW5nQnV0dG9uVGV4dDogXCJTYXZpbmdcIixcbn0pO1xuXG4vL3RoaXMgcnVucyB3aGVuIHdlIGNsaWNrICd5ZXMnIG9uIHRoZSBkZWxldGUtY29uZmlybSBtb2RhbFxuZnVuY3Rpb24gaGFuZGxlRGVsZXRlQ29uZmlybWF0aW9uU3VibWl0KGNhcmQpIHtcbiAgZGVsZXRlQ2FyZENvbmZpcm1hdGlvbi5zaG93TG9hZGluZygpO1xuICBmaXJzdEFQSVxuICAgIC5kZWxldGVDYXJkKGNhcmQuaWQpXG4gICAgLnRoZW4oKCkgPT4ge1xuICAgICAgLy8gZGVsZXRlIGNhcmQgZnJvbSBkb21cbiAgICAgIGNhcmQuZGVsZXRlQ2FyZCgpO1xuICAgICAgZGVsZXRlQ2FyZENvbmZpcm1hdGlvbi5jbG9zZSgpO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyLCBcIkNvdWxkIG5vdCBkZWxldGUgY2FyZCFcIik7XG4gICAgfSlcbiAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICBkZWxldGVDYXJkQ29uZmlybWF0aW9uLmhpZGVMb2FkaW5nKCk7XG4gICAgfSk7XG59XG5cbi8vdGhpcyBydW5zIHdoZW4gd2UgY2xpY2sgb24gaGVhcnRcbi8qIGZ1bmN0aW9uIGhhbmRsZUhlYXJ0SWNvbkNsaWNrKGNhcmQpIHtcbiAgaWYgKGNhcmQuaXNMaWtlZCkge1xuICAgIGZpcnN0QVBJXG4gICAgICAuaGFuZGxlTGlrZShjYXJkLmlkKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBjYXJkLmhhbmRsZUxpa2UoKTtcbiAgICAgICAgY2FyZC5pc0xpa2VkID0gZmFsc2U7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZmlyc3RBUElcbiAgICAgIC5oYW5kbGVVbmxpa2UoY2FyZC5pZClcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgY2FyZC5pc0xpa2VkID0gdHJ1ZTtcbiAgICAgICAgY2FyZC5oYW5kbGVMaWtlKCk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgfSk7XG4gIH0gKi9cbi8qICAgaWYgKCFjYXJkLmlzTGlrZWQpIHtcbiAgICBmaXJzdEFQSS5oYW5kbGVMaWtlKGNhcmQuaWQpLnRoZW4oKCkgPT4ge1xuICAgICAgLy8gZGVsZXRlIGNhcmQgZnJvbSBkb21cbiAgICAgIGNhcmQuaGFuZGxlTGlrZSgpO1xuICAgICAgY29uc29sZS5sb2coY2FyZCk7XG4gICAgfSk7XG4gIH0gKi9cbmZ1bmN0aW9uIGhhbmRsZUhlYXJ0SWNvbkNsaWNrKGNhcmREYXRhKSB7XG4gIGlmICghY2FyZERhdGEuaXNMaWtlZCkge1xuICAgIGZpcnN0QVBJXG4gICAgICAuaGFuZGxlTGlrZShjYXJkRGF0YS5pZClcbiAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICBjYXJkRGF0YS5zZXRJc0xpa2VkKGRhdGEuaXNMaWtlZCk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZmlyc3RBUElcbiAgICAgIC5oYW5kbGVVbmxpa2UoY2FyZERhdGEuaWQpXG4gICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgICAgY2FyZERhdGEuc2V0SXNMaWtlZChkYXRhLmlzTGlrZWQpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgIH0pO1xuICB9XG59XG5cbmRlbGV0ZUNhcmRDb25maXJtYXRpb24uc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuLy8gdHJhc2hJY29uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xuLy8gICBlLnByZXZlbnREZWZhdWx0KCk7XG4vLyAgIGRlbGV0ZUNhcmRDb25maXJtYXRpb24ub3BlbigpO1xuLy8gfSk7XG5cbi8vdGhpcyBydW5zIHdoZW4gd2UgY2xpY2sgYSBjYXJkJ3MgdHJhc2ggaWNvblxuZnVuY3Rpb24gaGFuZGxlVHJhc2hJY29uQ2xpY2soY2FyZCkge1xuICBkZWxldGVDYXJkQ29uZmlybWF0aW9uLm9wZW4oKTtcbiAgZGVsZXRlQ2FyZENvbmZpcm1hdGlvbi5zZXRTdWJtaXRIYW5kbGVyKCgpID0+XG4gICAgaGFuZGxlRGVsZXRlQ29uZmlybWF0aW9uU3VibWl0KGNhcmQpXG4gICk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VySW5mbyB7XG4gIGNvbnN0cnVjdG9yKG5hbWVTZWxlY3Rvciwgam9iU2VsZWN0b3IsIGF2YXRhclNlbGVjdG9yKSB7XG4gICAgdGhpcy5fdXNlck5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5hbWVTZWxlY3Rvcik7XG4gICAgdGhpcy5fdXNlckpvYiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioam9iU2VsZWN0b3IpO1xuICAgIHRoaXMuX3VzZXJBdmF0YXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGF2YXRhclNlbGVjdG9yKTtcbiAgfVxuICBnZXRVc2VySW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGhpcy5fdXNlck5hbWUudGV4dENvbnRlbnQsXG4gICAgICBqb2I6IHRoaXMuX3VzZXJKb2IudGV4dENvbnRlbnQsXG4gICAgICBhdmF0YXI6IHRoaXMuX3VzZXJBdmF0YXIuc3JjLFxuICAgIH07XG4gIH1cbiAgc2V0VXNlckluZm8obmFtZSwgam9iKSB7XG4gICAgdGhpcy5fdXNlck5hbWUudGV4dENvbnRlbnQgPSBuYW1lO1xuICAgIHRoaXMuX3VzZXJKb2IudGV4dENvbnRlbnQgPSBqb2I7XG4gIH1cbiAgc2V0QXZhdGFyKGF2YXRhcikge1xuICAgIHRoaXMuX3VzZXJBdmF0YXIuc3JjID0gYXZhdGFyO1xuICB9XG59XG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XG4gIGNvbnN0cnVjdG9yKHBvcFVwU2VsZWN0b3IpIHtcbiAgICAvLyAjbW9kYWwtaW1hZ2VcbiAgICBzdXBlcih7IHBvcFVwU2VsZWN0b3IgfSk7XG4gICAgdGhpcy5fcG9wVXBTZWxlY3RvciA9IHBvcFVwU2VsZWN0b3I7XG4gICAgdGhpcy5wb3BVcEltYWdlID0gdGhpcy5fcG9wRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19mdWxsLWltZ1wiKTtcbiAgICB0aGlzLnBvcFVwQ2FwdGlvbiA9IHRoaXMuX3BvcEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fbG9jYXRpb25cIik7XG4gICAgLy9lbGVtZW50IHRoYXQgaG9sZHMgdGhlIGltYWdlXG4gICAgLy9lbGVtZW50IHRoYXQgaG9sZHMgdGhlIGNhcHRpb25cbiAgfVxuICBvcGVuKG5hbWUsIGxpbmspIHtcbiAgICB0aGlzLnBvcFVwSW1hZ2Uuc3JjID0gbGluaztcbiAgICB0aGlzLnBvcFVwQ2FwdGlvbi50ZXh0Q29udGVudCA9IG5hbWU7XG4gICAgdGhpcy5wb3BVcEltYWdlLmFsdCA9IG5hbWU7XG4gICAgc3VwZXIub3BlbigpO1xuICB9XG59XG4iLCJjbGFzcyBBUEkge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy5fYmFzZVVybCA9IG9wdGlvbnMuYmFzZVVSTDtcbiAgICB0aGlzLl9oZWFkZXJzID0gb3B0aW9ucy5oZWFkZXJzO1xuICB9XG4gIF9wcm9jZXNzUmVzcG9uc2UgPSAocmVzKSA9PiB7XG4gICAgaWYgKHJlcy5vaykge1xuICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzLnN0YXR1c31gKTtcbiAgfTtcbiAgZ2V0SW5pdGlhbENhcmRzKCkge1xuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2AsIHtcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgfSkudGhlbih0aGlzLl9wcm9jZXNzUmVzcG9uc2UpO1xuICB9XG4gIGdldFVzZXJJbmZvKCkge1xuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZWAsIHtcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgfSkudGhlbih0aGlzLl9wcm9jZXNzUmVzcG9uc2UpO1xuICB9XG5cbiAgaGFuZGxlQmlvRGVzY3JpcHRpb25DaGFuZ2UoYWJvdXREZXNjcmlwdGlvbiwgdXNlck5hbWUpIHtcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWUvYCwge1xuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBhYm91dDogYWJvdXREZXNjcmlwdGlvbixcbiAgICAgICAgbmFtZTogdXNlck5hbWUsXG4gICAgICB9KSxcbiAgICB9KS50aGVuKHRoaXMuX3Byb2Nlc3NSZXNwb25zZSk7XG4gIH1cbiAgaGFuZGxlTGlrZShjYXJkSWQpIHtcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvJHtjYXJkSWR9L2xpa2VzYCwge1xuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgIG1ldGhvZDogXCJQVVRcIixcbiAgICB9KS50aGVuKHRoaXMuX3Byb2Nlc3NSZXNwb25zZSk7XG4gIH1cbiAgaGFuZGxlVW5saWtlKGNhcmRJZCkge1xuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2NhcmRJZH0vbGlrZXNgLCB7XG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxuICAgIH0pLnRoZW4odGhpcy5fcHJvY2Vzc1Jlc3BvbnNlKTtcbiAgfVxuICBoYW5kbGVCaW9JbWFnZUNoYW5nZShpbWFnZUxpbmspIHtcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWUvYXZhdGFyYCwge1xuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBhdmF0YXI6IGltYWdlTGluayxcbiAgICAgIH0pLFxuICAgIH0pLnRoZW4odGhpcy5fcHJvY2Vzc1Jlc3BvbnNlKTtcbiAgfVxuXG4gIGRlbGV0ZUNhcmQoY2FyZElkKSB7XG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzLyR7Y2FyZElkfWAsIHtcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXG4gICAgfSkudGhlbih0aGlzLl9wcm9jZXNzUmVzcG9uc2UpO1xuICB9XG5cbiAgcG9zdE5ld0NhcmQobmFtZSwgbGluaykge1xuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2AsIHtcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBuYW1lLFxuICAgICAgICBsaW5rLFxuICAgICAgfSksXG4gICAgfSkudGhlbih0aGlzLl9wcm9jZXNzUmVzcG9uc2UpO1xuICB9XG4gIGdldENhcmRzQW5kVXNlckluZm8oKSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKFt0aGlzLmdldFVzZXJJbmZvKCksIHRoaXMuZ2V0SW5pdGlhbENhcmRzKCldKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBUEk7XG4iLCIvKiBJdHMgc2Vjb25kIGNvbnN0cnVjdG9yIHBhcmFtZXRlciBzaG91bGQgYmUgYSBDU1MgY2xhc3Mgc2VsZWN0b3Igd2hlcmVcbnlvdSdsbCBhZGQgdGhlIGNhcmQgZWxlbWVudHMuXG5JdCBoYXMgYSBwdWJsaWMgbWV0aG9kIG5hbWVkIHJlbmRlckl0ZW1zKCkgdGhhdCByZW5kZXJzIGFsbCBlbGVtZW50cyBvbiB0aGUgcGFnZS4gSXQgc2hvdWxkIGl0ZXJhdGVcbnRocm91Z2ggdGhlIGl0ZW1zIGFycmF5IGFuZCBjYWxsIHRoZSByZW5kZXJlcigpIGZ1bmN0aW9uIG9uIGVhY2ggaXRlbS5cblRoaXMgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgb25jZSBvbiBwYWdlIGxvYWQuXG5JdCBoYXMgYSBwdWJsaWMgbWV0aG9kIG5hbWVkIGFkZEl0ZW0oKSB0aGF0IHRha2VzIGEgRE9NIGVsZW1lbnQgYW5kIGFkZHMgaXQgdG8gdGhlIGNvbnRhaW5lci5cbiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYWRkaW5nIGFuIGluZGl2aWR1YWwgY2FyZCB0byB0aGUgRE9NLlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlY3Rpb24ge1xuICBjb25zdHJ1Y3Rvcih7IGl0ZW1zLCByZW5kZXJlciB9LCBjb250YWluZXJTZWxlY3Rvcikge1xuICAgIHRoaXMuaXRlbXMgPSBpdGVtcztcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgIHRoaXMuX2NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyU2VsZWN0b3IpO1xuICB9XG4gIHNldEl0ZW1zKGl0ZW1zKSB7XG4gICAgdGhpcy5pdGVtcyA9IGl0ZW1zO1xuICB9XG4gIHJlbmRlckl0ZW1zKCkge1xuICAgIHRoaXMuaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgdGhpcy5fcmVuZGVyZXIoaXRlbSk7XG4gICAgfSk7XG4gIH1cbiAgYWRkSXRlbShpdGVtKSB7XG4gICAgdGhpcy5fY29udGFpbmVyLnByZXBlbmQoaXRlbSk7XG4gIH1cbn1cbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhDb25maXJtYXRpb24gZXh0ZW5kcyBQb3B1cCB7XG4gIGNvbnN0cnVjdG9yKHsgcG9wVXBTZWxlY3RvciwgaGFuZGxlRm9ybVN1Ym1pdCwgbG9hZGluZ0J1dHRvblRleHQgfSkge1xuICAgIHN1cGVyKHsgcG9wVXBTZWxlY3RvciB9KTtcbiAgICB0aGlzLl9sb2FkaW5nQnV0dG9uVGV4dCA9IGxvYWRpbmdCdXR0b25UZXh0O1xuICAgIHRoaXMuX3BvcEZvcm0gPSB0aGlzLl9wb3BFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2Zvcm1cIik7XG4gICAgdGhpcy5fc3VibWl0QnV0dG9uID0gdGhpcy5fcG9wRm9ybS5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19idXR0b25cIik7XG4gICAgdGhpcy5fYnV0dG9uVGV4dCA9IHRoaXMuX3N1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudDtcbiAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcbiAgfVxuXG4gIHNldFN1Ym1pdEhhbmRsZXIoaGFuZGxlcikge1xuICAgIHRoaXMuX2hhbmRsZUZvcm1TdWJtaXQgPSBoYW5kbGVyO1xuICB9XG5cbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5fcG9wRm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChlKSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0KCk7XG4gICAgfSk7XG4gIH1cbiAgc2hvd0xvYWRpbmcoKSB7XG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLnRleHRDb250ZW50ID0gdGhpcy5fbG9hZGluZ0J1dHRvblRleHQ7XG4gIH1cblxuICBoaWRlTG9hZGluZygpIHtcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24udGV4dENvbnRlbnQgPSB0aGlzLl9idXR0b25UZXh0O1xuICB9XG59XG4iXSwibmFtZXMiOlsiUG9wdXAiLCJjb25zdHJ1Y3RvciIsIl9yZWYiLCJwb3BVcFNlbGVjdG9yIiwidGhpcyIsIl9wb3BFbGVtZW50IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiX2Nsb3NlQnV0dG9uIiwib3BlbiIsImNsYXNzTGlzdCIsImFkZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJfaGFuZGxlRXNjQ2xvc2UiLCJfY2xvc2VXaXRoQ2xpY2siLCJjbG9zZSIsInJlbW92ZSIsImNvbnNvbGUiLCJsb2ciLCJldmVudCIsImtleSIsInRhcmdldCIsImNvbnRhaW5zIiwic2V0RXZlbnRMaXN0ZW5lcnMiLCJQb3B1cFdpdGhGb3JtIiwiaGFuZGxlRm9ybVN1Ym1pdCIsImxvYWRpbmdCdXR0b25UZXh0Iiwic3VwZXIiLCJfbG9hZGluZ0J1dHRvblRleHQiLCJfcG9wRm9ybSIsIl9oYW5kbGVGb3JtU3VibWl0IiwiX3N1Ym1pdEJ1dHRvbiIsIl9idXR0b25UZXh0IiwidGV4dENvbnRlbnQiLCJfaW5wdXRFbHMiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiX2dldElucHV0VmFsdWVzIiwiaW5wdXRFbHNPYmoiLCJmb3JFYWNoIiwiaW5wdXQiLCJuYW1lIiwidmFsdWUiLCJzZXRJbnB1dFZhbHVlcyIsImFyciIsImkiLCJsZW5ndGgiLCJlIiwicHJldmVudERlZmF1bHQiLCJpbnB1dFZhbHVlcyIsInNob3dMb2FkaW5nIiwiaGlkZUxvYWRpbmciLCJyZXNldCIsIkNhcmQiLCJkYXRhIiwiY2FyZFRlbXBsYXRlU2VsZWN0b3IiLCJoYW5kbGVJbWFnZUNsaWNrIiwiaGFuZGxlVHJhc2hJY29uQ2xpY2siLCJoYW5kbGVIZWFydEljb25DbGljayIsIl9kYXRhIiwiaWQiLCJfaWQiLCJpc0xpa2VkIiwiX2NhcmRUZW1wbGF0ZSIsImNvbnRlbnQiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIl9oYW5kbGVJbWFnZUNsaWNrIiwiX2hhbmRsZVRyYXNoSWNvbkNsaWNrIiwiX2hhbmRsZUhlYXJ0SWNvbkNsaWNrIiwiZGVsZXRlQ2FyZCIsIl9jYXJkRWxlbWVudCIsIl9yZW5kZXJMaWtlcyIsInNldElzTGlrZWQiLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJfbGlrZUJ0biIsIl90cmFzaEljb24iLCJfY2FyZEVsZW1lbnRJbWFnZSIsImxpbmsiLCJnZXRDYXJkRWxlbWVudCIsImNsb25lTm9kZSIsIl9jYXJkRWxlbWVudFRpdGxlIiwic3JjIiwiYWx0IiwiX2ltYWdlTW9kYWxFbGVtZW50IiwiX2Z1bGxDYXJkIiwiX2NhcmRMb2NhdGlvbiIsIkZvcm1WYWxpZGF0b3IiLCJvcHRpb25zIiwiZm9ybUVsIiwiX29wdGlvbnMiLCJfZm9ybUVsIiwiX3Nob3dJbnB1dEVycm9yIiwiaW5wdXRFbCIsIl9lcnJvckVsIiwiaW5wdXRFcnJvckNsYXNzIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJlcnJvckNsYXNzIiwiX2hpZGVJbnB1dEVycm9yIiwiX2NoZWNrSW5wdXRWYWxpZGl0eSIsInZhbGlkaXR5IiwidmFsaWQiLCJfY2hlY2tGb3JtVmFsaWRpdHkiLCJldmVyeSIsInRvZ2dsZUJ1dHRvblN0YXRlIiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsImRpc2FibGVkIiwiaW5wdXRTZWxlY3RvciIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiZW5hYmxlVmFsaWRhdGlvbiIsImVkaXRNb2RhbEVsZW1lbnQiLCJhZGRNb2RhbEVsZW1lbnQiLCJpbWFnZU1vZGFsRWxlbWVudCIsImJpb0ltYWdlTW9kYWxFbGVtZW50IiwiZWRpdFByb2ZpbGVCdXR0b24iLCJhZGRQcm9maWxlQnV0dG9uIiwiY3JlYXRlQ2FyZCIsImNhcmREYXRhIiwidXNlckluZm8iLCJPYmplY3QiLCJ2YWx1ZXMiLCJ1c2VyT25lIiwiZ2V0VXNlckluZm8iLCJwcm9maWxlUG9wVXAiLCJuYW1lU2VsZWN0b3IiLCJqb2JTZWxlY3RvciIsImF2YXRhclNlbGVjdG9yIiwiX3VzZXJOYW1lIiwiX3VzZXJKb2IiLCJfdXNlckF2YXRhciIsImpvYiIsImF2YXRhciIsInNldFVzZXJJbmZvIiwic2V0QXZhdGFyIiwiaW1hZ2VQb3BVcCIsImFkZFBvcFVwIiwiYWRkTW9kYWxWYWxpZGF0b3IiLCJjb25maWciLCJmb3JtU2VsZWN0b3IiLCJlZGl0TW9kYWxWYWxpZGF0b3IiLCJpbnB1dEtleSIsImlucHV0VmFsdWUiLCJmaXJzdEFQSSIsImhhbmRsZUJpb0Rlc2NyaXB0aW9uQ2hhbmdlIiwidGhlbiIsImNhdGNoIiwiZXJyIiwiZXJyb3IiLCJmaW5hbGx5IiwicHJvZmlsZUltYWdlUG9wVXAiLCJoYW5kbGVCaW9JbWFnZUNoYW5nZSIsInBvc3ROZXdDYXJkIiwiY2FyZEVsIiwiY2FyZEVsZW1lbnRzIiwiYWRkSXRlbSIsIl9wb3BVcFNlbGVjdG9yIiwicG9wVXBJbWFnZSIsInBvcFVwQ2FwdGlvbiIsIl9iYXNlVXJsIiwiYmFzZVVSTCIsIl9oZWFkZXJzIiwiaGVhZGVycyIsIl9wcm9jZXNzUmVzcG9uc2UiLCJyZXMiLCJvayIsImpzb24iLCJQcm9taXNlIiwicmVqZWN0Iiwic3RhdHVzIiwiZ2V0SW5pdGlhbENhcmRzIiwiZmV0Y2giLCJhYm91dERlc2NyaXB0aW9uIiwidXNlck5hbWUiLCJtZXRob2QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImFib3V0IiwiaGFuZGxlTGlrZSIsImNhcmRJZCIsImhhbmRsZVVubGlrZSIsImltYWdlTGluayIsImdldENhcmRzQW5kVXNlckluZm8iLCJhbGwiLCJhdXRob3JpemF0aW9uIiwiY29udGFpbmVyU2VsZWN0b3IiLCJpdGVtcyIsInJlbmRlcmVyIiwiX3JlbmRlcmVyIiwiX2NvbnRhaW5lciIsInNldEl0ZW1zIiwicmVuZGVySXRlbXMiLCJpdGVtIiwicHJlcGVuZCIsImNhcmQiLCJjYXJkcyIsImRlbGV0ZUNhcmRDb25maXJtYXRpb24iLCJzZXRTdWJtaXRIYW5kbGVyIiwiaGFuZGxlciIsImhhbmRsZURlbGV0ZUNvbmZpcm1hdGlvblN1Ym1pdCJdLCJzb3VyY2VSb290IjoiIn0=